import random

from loader import dp, bot
from aiogram import types
from aiogram.dispatcher.filters import Command, Text
from loguru import logger
from utils.db.db_utils import get_user, withdraw_user_balance, deposite_user_balance
from states import CoinState
from keyboards.inline.coin_kb import coin_kb
from aiogram.dispatcher import FSMContext

@dp.message_handler(Command('coin'))
async def coin(message: types.Message):
    await CoinState.rate.set()
    
    await message.answer('<b>–í–≤–µ–¥–∏—Ç–µ —Å—Ç–∞–≤–∫—É</b>')
    
@dp.message_handler(Text('–ú–æ–Ω–µ—Ç–∫–∞ üí±'))
async def coin(message: types.Message):
    await CoinState.rate.set()
    
    await message.answer('<b>–í–≤–µ–¥–∏—Ç–µ —Å—Ç–∞–≤–∫—É</b>')

    
@dp.message_handler(state=CoinState.rate)
async def coin(message: types.Message, state: FSMContext):
    rate = message.text
    user_id = message.from_user.id

    if not rate.isdigit():
        await message.answer('<b>–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ</b>')
        return
    elif 5 < int(rate) > 1000:
        await message.answer(
            '–û–π! –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞–≤–∫—É –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏\n'
            '(–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ - 5 ‚ÇΩ, –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è - 1000 ‚ÇΩ)')
        return
    elif get_user(message.from_user.id).balance < int(rate):
        await message.answer('–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤')
        return
    withdraw_user_balance(int(user_id), int(rate))
    await state.update_data(rate=int(rate), count=0)

    await CoinState.next()

    await message.answer(
        'ü™ô –ú–æ–Ω–µ—Ç–∫–∞\n\n'
        '‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n'
        f'<b>üí∏ –°—Ç–∞–≤–∫–∞:</b> <code>{rate} ‚ÇΩ</code>\n'
        '<b>–ö–æ–ª-–≤–æ —É–≥–∞–¥–∞–Ω–Ω–æ:</b> <code>0 —Ä–∞–∑</code>\n'
        '‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n'
        '<b>–ú–Ω–æ–∂–∏—Ç–µ–ª—å:</b> <code>0x</code>\n'
        '<b>–ò—Ç–æ–≥–æ–≤—ã–π –ø—Ä–∏–∑:</b> <code>0 ‚ÇΩ</code>', reply_markup=coin_kb)

@dp.callback_query_handler(
    lambda m: m.data.startswith('–ú–æ–Ω–µ—Ç–∫–∞') and not m.data.endswith('–ø—Ä–∏–∑'), 
    state=CoinState.count_guess)
async def coin(call: types.CallbackQuery, state: FSMContext):
    sign = int(call.data.split()[1])
    random_sign = random.randint(0, 1)
    
    data = await state.get_data()
    rate = data.get('rate')
    count = data.get('count')
    if sign == 0:
        if sign == random_sign:
            count += 1
            await state.update_data(count=count)
            await call.message.edit_text(
                'ü™ô –ú–æ–Ω–µ—Ç–∫–∞\n\n'
                '‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n'
                f'<b>üí∏ –°—Ç–∞–≤–∫–∞:</b> <code>{rate} ‚ÇΩ</code>\n'
                f'<b>–ö–æ–ª-–≤–æ —É–≥–∞–¥–∞–Ω–Ω–æ:</b> <code>{count} —Ä–∞–∑</code>\n'
                '‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n'
                f'<b>–ú–Ω–æ–∂–∏—Ç–µ–ª—å:</b> <code>{count * 0.5}x</code>\n'
                f'<b>–ò—Ç–æ–≥–æ–≤—ã–π –ø—Ä–∏–∑:</b> <code>{rate * (count * 0.5)} ‚ÇΩ</code>\n\n'
                '<b>–ü—Ä–∞–≤–∏–ª—å–Ω–æ! –≠—Ç–æ –±—ã–ª –æ—Ä–µ–ª</b>', reply_markup=coin_kb)
        else:
            await state.finish()
            await call.message.edit_text(
                'ü™ô –ú–æ–Ω–µ—Ç–∫–∞\n\n'
                '‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n'
                f'<b>üí∏ –°—Ç–∞–≤–∫–∞:</b> <code>{rate} ‚ÇΩ</code>\n'
                f'<b>–ö–æ–ª-–≤–æ —É–≥–∞–¥–∞–Ω–Ω–æ:</b> <code>{count} —Ä–∞–∑</code>\n'
                '‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n'
                f'<b>–ú–Ω–æ–∂–∏—Ç–µ–ª—å:</b> <code>{count * 0.5}x</code>\n\n'
                '<b>–ù–µ —É–¥–∞—á–∞! –≠—Ç–æ –±—ã–ª–∞ —Ä–µ—à–∫–∞</b>', reply_markup=coin_kb
            )
    else:
        if sign == random_sign:
            count += 1
            await state.update_data(count=count)
            await call.message.edit_text(
                'ü™ô –ú–æ–Ω–µ—Ç–∫–∞\n\n'
                '‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n'
                f'<b>üí∏ –°—Ç–∞–≤–∫–∞:</b> <code>{rate} ‚ÇΩ</code>\n'
                f'<b>–ö–æ–ª-–≤–æ —É–≥–∞–¥–∞–Ω–Ω–æ:</b> <code>{count} —Ä–∞–∑</code>\n'
                '‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n'
                f'<b>–ú–Ω–æ–∂–∏—Ç–µ–ª—å:</b> <code>{count * 0.5}</code>\n'
                f'<b>–ò—Ç–æ–≥–æ–≤—ã–π –ø—Ä–∏–∑:</b> <code>{rate * (count * 0.5)}x ‚ÇΩ</code>\n\n'
                '<b>–ü—Ä–∞–≤–∏–ª—å–Ω–æ! –≠—Ç–æ –±—ã–ª–∞ —Ä–µ—à–∫–∞</b>', reply_markup=coin_kb)
            await state.update_data(count=count)
        else:
            await state.finish()
            await call.message.edit_text(
                'ü™ô –ú–æ–Ω–µ—Ç–∫–∞\n\n'
                '‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n'
                f'<b>üí∏ –°—Ç–∞–≤–∫–∞:</b> <code>{rate} ‚ÇΩ</code>\n'
                f'<b>–ö–æ–ª-–≤–æ —É–≥–∞–¥–∞–Ω–Ω–æ:</b> <code>{count} —Ä–∞–∑</code>\n'
                '‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n'
                f'<b>–ú–Ω–æ–∂–∏—Ç–µ–ª—å:</b> <code>{count * 0.5}x</code>\n\n'

                '<b>–ù–µ —É–¥–∞—á–∞! –≠—Ç–æ –±—ã–ª –æ—Ä–µ–ª</b>', reply_markup=coin_kb)

@dp.callback_query_handler(
    lambda m: m.data == '–ú–æ–Ω–µ—Ç–∫–∞ –ø—Ä–∏–∑', 
    state=CoinState.count_guess)
async def coin(call: types.CallbackQuery, state=FSMContext):
    data = await state.get_data()
    rate = data.get('rate')
    count = data.get('count')
    deposite_user_balance(call.from_user.id, rate * (count * 0.5))
    await call.message.answer(f'–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–±—Ä–∞–ª–∏ –ø—Ä–∏–∑, +{rate * (count * 0.5)} ‚ÇΩ')
