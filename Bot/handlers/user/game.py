from loader import dp
from aiogram import Dispatcher, types
from aiogram.dispatcher.filters import Command, StateFilter
import random
from aiogram.dispatcher import FSMContext
from states import BombsState
from utils.test import generate
from utils.gen_field import generate_field
from test import calculate

@dp.message_handler(Command('game'))
async def game(message: types.Message):
    await BombsState.rate.set()
    await message.answer(
        '‚†Ä<b>–ú–∏–Ω–Ω–æ–µ –ø–æ–ª–µ üí£</b>\n\n'
        '<b>–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞–≤–∫—É</b>'
    )

@dp.message_handler(state=BombsState.rate)
async def game(message: types.Message, state: FSMContext):
    if not message.text.isdigit():
        await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ')
        return
    await state.update_data(rate=int(message.text))
    await BombsState.count.set()
    
    data = await state.get_data()
    rate = data.get('rate')
    await message.answer(
        '‚†Ä<b>–ú–∏–Ω–Ω–æ–µ –ø–æ–ª–µ üí£</b>\n\n'

        '<b>–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª-–≤–æ –±–æ–º–±</b>')
    

@dp.message_handler(state=BombsState.count)
async def game(message: types.Message, state: FSMContext):
    if not message.text.isdigit():
        await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ')
        return
    if 5 > int(message.text) or int(message.text) > 24:
        await message.answer('–≤—ã –∑–∞–±–∞–Ω–µ–Ω—ã –∑–∞ –∞–±—å—é–∑ —Å–∏—Å—Ç–µ–º—ã')
        return
    await state.update_data(count=int(message.text))
    await BombsState.field.set()
    data = await state.get_data()
    rate = data.get('rate')
    count = data.get('count')

    field = generate(count=count)
    await state.update_data(field=field)

    await message.answer(
        '‚†Ä<b>–ú–∏–Ω–Ω–æ–µ –ø–æ–ª–µ üí£</b>\n\n'
        '‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n'
        f'<b>üí∏ –°—Ç–∞–≤–∫–∞:</b> <code>{rate} ‚ÇΩ</code>\n'
        f'<b>‚ùì –ö–æ–ª-–≤–æ –º–∏–Ω:</b> <code>{count} —à—Ç.</code>\n'
        '‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n'
        f'<b>üí∞ –ú–Ω–æ–∂–∏—Ç–µ–ª—å:</b> <code>0x</code>\n'
        f'<b>üí£ –û—Ç–≥–∞–¥–∞–Ω–æ –±–æ–º–±:</b> <code>0 —à—Ç.</code>\n\n'
        f'<b>–°—É–º–º–∞ –≤—ã–∏–≥—Ä—ã—à–∞:</b> <code>0 ‚ÇΩ</code>\n', reply_markup=generate_field(field))


@dp.callback_query_handler(lambda m: len(m.data.split()) == 3, state=BombsState.field)
async def game(call: types.CallbackQuery, state: FSMContext):
    _, cell, index = call.data.split()
    data = await state.get_data()
    field = data.get('field')
    rate = data.get('rate')
    count = data.get('count')

    if int(cell) == 0:
        field[int(index)] = 2
        await state.update_data(field=field)
        await call.message.edit_text(
            '‚†Ä<b>–ú–∏–Ω–Ω–æ–µ –ø–æ–ª–µ üí£</b>\n\n'
            '‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n'
            f'<b>üí∏ –°—Ç–∞–≤–∫–∞:</b> <code>{rate} ‚ÇΩ</code>\n'
            f'<b>‚ùì –ö–æ–ª-–≤–æ –º–∏–Ω:</b> <code>{count} —à—Ç.</code>\n'
            '‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n'
            f'<b>üí∞ –ú–Ω–æ–∂–∏—Ç–µ–ª—å:</b> <code>{calculate(25 - count, field.count(2))}x</code>\n'
            f'<b>üí£ –û—Ç–≥–∞–¥–∞–Ω–æ –±–æ–º–±:</b> <code>{field.count(2)} —à—Ç.</code>\n\n'
            f'<b>–°—É–º–º–∞ –≤—ã–∏–≥—Ä—ã—à–∞:</b> <code>{calculate(25 - count, field.count(2)) * rate} ‚ÇΩ</code>\n', reply_markup=generate_field(field))
    if int(cell) == 1:
        await state.finish()
        field[int(index)] = 3
        await call.message.edit_text(
            '‚†Ä<b>–ú–∏–Ω–Ω–æ–µ –ø–æ–ª–µ üí£</b>\n\n'
            '‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n'
            f'<b>üí∏ –°—Ç–∞–≤–∫–∞:</b> <code>{rate} ‚ÇΩ</code>\n'
            f'<b>‚ùì –ö–æ–ª-–≤–æ –º–∏–Ω:</b> <code>{count} —à—Ç.</code>\n'
            '‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n'
            f'<b>üí∞ –ú–Ω–æ–∂–∏—Ç–µ–ª—å:</b> <code>{calculate(25 - count, field.count(2))}x</code>\n'
            f'<b>üí£ –û—Ç–≥–∞–¥–∞–Ω–æ –±–æ–º–±:</b> <code>{field.count(2)} —à—Ç.</code>\n'
            '‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n\n'
            '<b>–ü—Ä–æ–∏–≥—Ä—ã—à, –ø–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞!</b>', reply_markup=generate_field(field, finish=True))
        await call.message.answer('üí£')


